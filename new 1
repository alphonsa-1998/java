1.SAMPLE JAVA PRG:
package deloitte;

public class HelloWorld {
	
	
	public static void main(String args[])
	{
       
		System.out.println("ADDITION = "+add(2,3));
		System.out.println("SUBTRACTION ="+sub(5,2));
		System.out.println("MULTIPLICATION ="+mul(2,3));
	}
	
	
	public static int add(int x, int y)
	 {
		 return x+y;
	 }
	 
	public static int sub(int x, int y)
	 {
		 return x-y;
	 }
	
	public static int mul(int x, int y)
	 {
		 return x*y;
	 }
}


2.EMPLOYEE
package deloitte;

public class employee {
	private int empId;
	private String empName;
	private double salary;
	private String deptId;

	// default constructor
	employee() {

	}

	// parameterized constructor in java
	employee(int empId, String empName, double salary, String deptId) {
		this.empId = empId;
		this.empName = empName;
		this.salary = salary;
		this.deptId = deptId;
	}

	public int getEmpId() {
		return empId;
	}

	public void setEmpId(int empId) {
		this.empId = empId;
	}

	public String getEmpName() {
		return empName;
	}

	public void setEmpName(String empName) {
		String pattern = "^[a-zA-Z]+$";
		if (empName.matches(pattern))
			this.empName = empName;
		else
			System.out.println("Please enter name in alphabets");
	}

	public static boolean nameValidation(String name) {
		String pattern = "^[a-zA-Z]+$";
		if (name.matches(pattern))
			// this.empName = empName;
			return true;
		else {
			System.out.println("Please enter name in alphabets");
			return false;
		}

	}

	public double getSalary() {
		return salary;
	}

	public void setSalary(double salary) {
		this.salary = salary;
	}

	public String getDeptId() {
		return deptId;
	}

	public void setDeptId(String deptId) {
		this.deptId = deptId;
	}

	public void deptChange(String deptName) {
		System.out.println("inside dept change method");
	}

	public double salaryIncrement(double amount) {
		System.out.println("inside increment method");
		return 10.10;
	}

}


2.1:employee demo
package deloitte;

import java.util.Scanner;

public class Employeedemo {

	public static void main(String args[]) {
		
		Scanner sc=new Scanner(System.in);
		System.out.println("Please enter name");
		String name=sc.next();
		
		System.out.println("Please enter salary");
		String salary=sc.next();
		
		boolean nameFlag=validation.nameValidation(name);
		boolean salaryFlag=validation.salaryValidation(salary);

		
		if(nameFlag && salaryFlag)
		{
		employee emp1 = new employee();// calling default constructor
		emp1.setDeptId("Associate Analyst");
		emp1.setEmpId(101);
		emp1.setEmpName("abc");
		emp1.setSalary(25000);
		System.out.println(emp1.getSalary());
		}

		//employee emp2 = new employee(102, "abc", 25000, "CS");// calling parameterized constructor
		//System.out.println(emp2.getEmpId());
		

		
	}

}

3.VALIDATION
package deloitte;

public class validation {
	public static boolean nameValidation(String name) {
		String pattern = "^[a-zA-Z]+$";
		if (name.matches(pattern))
			// this.empName = empName;
			return true;
		else {
			System.out.println("Please enter name in alphabets");
			return false;
		}

	}

	public static boolean salaryValidation(String salary) {
		String pattern = "^[0-9]+$";
		if (salary.matches(pattern))
			// this.empName = empName;
			return true;
		else {
			System.out.println("Please enter salary in digits");
			return false;
		}

	}

}

4.CLASSROOM
package deloitte;

public class Classroom {

	private String classroomName;
	private int numberOfsystems;
	private boolean projector;
	private boolean ac;
	// int students;
	private String facultyName;
	private boolean occupied;

//	private  boolean facultyAvailability;
	@Override
	public String toString() {
		return "Classroom [classroomName=" + classroomName + ", numberOfsystems=" + numberOfsystems + ", projector="
				+ projector + ", ac=" + ac + ", facultyName=" + facultyName + ", occupied=" + occupied
				+ ", classroomId=" + classroomId + "]";
	}

	private int classroomId;

	// deafult constructor
	Classroom() {

	}

	public int getClassroomId() {
		return classroomId;
	}

	public void setClassroomId(int classroomId) {
		this.classroomId = classroomId;
	}

	public String getClassroomName() {
		return classroomName;
	}

	public void setClassroomName(String classroomName) {
		this.classroomName = classroomName;
	}

	public int getNumberOfsystems() {
		return numberOfsystems;
	}

	public void setNumberOfsystems(int numberOfsystems) {
		this.numberOfsystems = numberOfsystems;
	}

	public boolean isProjector() {
		return projector;
	}

	public void setProjector(boolean projector) {
		this.projector = projector;
	}

	public boolean isAc() {
		return ac;
	}

	public void setAc(boolean ac) {
		this.ac = ac;
	}

	public String getFacultyName() {
		return facultyName;
	}

	public void setFacultyName(String facultyName) {
		this.facultyName = facultyName;
	}

	public boolean isOccupied() {
		return occupied;
	}

	public void setOccupied(boolean occupied) {
		this.occupied = occupied;
	}

	/*public boolean isFacultyAvailability() {
		return facultyAvailability;
	}

	public void setFacultyAvailability(boolean facultyAvailability) {
		this.facultyAvailability = facultyAvailability;
	}*/

}

4.1
package deloitte;

import java.util.*;

public class ClassroomDemo {

	public static void main(String args[]) {

		Scanner sc = new Scanner(System.in);
		Classroom[] room = null;
		String noOfRooms;
		while (true) {
			System.out.println(
					"1.Add mew room" + "2.Search room" + "3.Display all room" + "4.Allocate the room" + "5.exit");

			String option = sc.next();

			switch (option) {

			case "1":
				System.out.println("please enter total no:of rooms");
				noOfRooms = sc.next();
				room = new Classroom[Integer.parseInt(noOfRooms)];

				for (int i = 0; i < room.length; i++) {
					System.out.println("enter id");
					String id = sc.next();
					System.out.println("enter classroom name");
					String name = sc.next();
					System.out.println("enter no:of systems");
					String systems = sc.next();
					System.out.println("is projector needed");
					String projector = sc.next();
					System.out.println("is AC needed");
					String ac = sc.next();
					/*System.out.println("enter faculty name");
					String faculty = sc.next();*/

					Classroom c = new Classroom();
					c.setClassroomId(Integer.parseInt(id));
					c.setClassroomName(name);
					c.setNumberOfsystems(Integer.parseInt(systems));
					c.setProjector(true);
					c.setAc(true);
				//	c.setFacultyName(faculty);
					c.setOccupied(false);
					//c.setFacultyAvailability(true);

					/*
					 * System.out.println(c.getClassroomId());
					 * System.out.println(c.getClassroomName());
					 * System.out.println(c.getNumberOfsystems());
					 * System.out.println(c.isProjector()); System.out.println(c.isAc());
					 * System.out.println(c.getFacultyName());
					 */

					room[i] = c;

				}
				break;

			case "2":
				System.out.println("enter the class id to search");
				int cls = sc.nextInt();
				boolean flag = false;
				for (Classroom c : room) {
					if (c.getClassroomId() == cls) {
						System.out.println(c);
						flag = true;
					}
				}
				if (!flag) {
					System.out.println("no rooms found");
				}
				break;
			case "3":
				for (Classroom c : room) {
					System.out.println(c);
				}

				break;

			case "4":
				System.out.println("enter the minimum no:of systems required");
				int n = sc.nextInt();

				boolean f = false;
				for (Classroom c : room) {
					if (c.getNumberOfsystems() >= n) {
						// System.out.println(c);
						f = true;
					

						
						System.out.println("ALLOCATED");
						System.out.println("enter the name of faculty required");
						String nameFac = sc.next();
						c.setFacultyName(nameFac);
						System.out.println("Faculty allocated");
						System.out.println(c);
					}
				}
				if (!f) {
					System.out.println("NOT ALLOCATED");
				}
				
				break;
			case "5":
				System.exit(0);

				// System.out.println(c);
			}
		}
	}

}
